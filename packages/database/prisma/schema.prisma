// SPDX-FileCopyrightText: 2023 HH Partners
//
// SPDX-License-Identifier: MIT

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
  output   = "./generated-zod-schemas"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

/// A source file or other file included in a package. The Files are uniquely identified by their
/// SHA256 hash value, and one File can be referenced by multiple FileTrees, which represent the
/// file's location in the context of one package.
model File {
  id         Int      @id @default(autoincrement())
  sha256     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  scanStatus String

  filetrees         FileTree[]
  licenseFindings   LicenseFinding[]
  copyrightFindings CopyrightFinding[]
}

/// A package consisting of its source code files.
model Package {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  purl       String
  name       String
  version    String
  scanStatus String

  fileTrees   FileTree[]
  scannerJobs ScannerJob[]
}

/// File in the context of a package.
model FileTree {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// The path of the file in the package.
  path      String

  packageId Int
  package   Package @relation(fields: [packageId], references: [id])

  sha256 String
  file   File   @relation(fields: [sha256], references: [sha256])

  @@index([packageId])
  @@index([sha256])
}

/// A license finding in a file.
model LicenseFinding {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  scanner           String
  licenseExpression String
  startLine         Int
  endLine           Int
  score             Float
  scannerName       String
  scannerVersion    String

  file   File   @relation(fields: [sha256], references: [sha256])
  sha256 String

  licenseFindingCurations LicenseFindingCuration[]

  @@index([sha256])
}

/// A curation of a license finding.
model LicenseFindingCuration {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  licenseExpression String

  licenseFindingId Int
  licenseFinding   LicenseFinding @relation(fields: [licenseFindingId], references: [id])

  @@index([licenseFindingId])
}

/// A copyright finding in a file.
model CopyrightFinding {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  startLine      Int
  endLine        Int
  copyright      String
  scannerName    String
  scannerVersion String

  file   File   @relation(fields: [sha256], references: [sha256])
  sha256 String

  copyrightFindingCurations CopyrightFindingCuration[]

  @@index([sha256])
}

/// A curation of a copyright finding.
model CopyrightFindingCuration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  copyright String

  copyrightFindingId Int
  copyrightFinding   CopyrightFinding @relation(fields: [copyrightFindingId], references: [id])

  @@index([copyrightFindingId])
}

/// A scanner job.
model ScannerJob {
  id                     String    @id @default(uuid())
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  state                  String
  scannerName            String?
  scannerVersion         String?
  scannerConfig          String?
  duration               Float?
  scanStartTS            DateTime?
  scanEndTS              DateTime?
  spdxLicenseListVersion String?

  packageId Int
  package   Package @relation(fields: [packageId], references: [id])
}
