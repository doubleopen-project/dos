// SPDX-FileCopyrightText: 2023 HH Partners
//
// SPDX-License-Identifier: MIT

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
  output   = "./generated-zod-schemas"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

/// A source file or other file included in a package. The Files are uniquely identified by their
/// SHA256 hash value, and one File can be referenced by multiple FileTrees, which represent the
/// file's location in the context of one package.
model File {
  id         Int      @id @default(autoincrement())
  sha256     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  scanStatus String

  filetrees          FileTree[]
  licenseFindings    LicenseFinding[]
  licenseConclusions LicenseConclusion[]
  copyrightFindings  CopyrightFinding[]
  scanIssues         ScanIssue[]
}

/// A package consisting of its source code files.
model Package {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  purl       String   @unique @default(dbgenerated())
  type       String
  name       String
  namespace  String?
  version    String?
  qualifiers String?
  subpath    String?
  scanStatus String

  fileTrees       FileTree[]
  scannerJobs     ScannerJob[]
  pathExclusions  PathExclusion[]
  BulkConclusions BulkConclusion[]
}

/// File in the context of a package.
model FileTree {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// The path of the file in the package.
  path      String

  packageId Int
  package   Package @relation(fields: [packageId], references: [id])

  fileSha256 String
  file       File   @relation(fields: [fileSha256], references: [sha256])

  @@index([packageId])
  @@index([fileSha256])
}

/// A license finding in a file.
model LicenseFinding {
  id                    Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  unprocessedLicenseExpressionSPDX String
  scanner               String
  scannerConfig         String

  fileSha256 String
  file       File   @relation(fields: [fileSha256], references: [sha256])

  licenseFindingMatches LicenseFindingMatch[]

  @@index([fileSha256])
}

/// A license finding match
model LicenseFindingMatch {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  startLine         Int
  endLine           Int
  score             Float
  licenseExpression String

  licenseFindingId Int
  licenseFinding   LicenseFinding @relation(fields: [licenseFindingId], references: [id], onDelete: Cascade)

  @@index([licenseFindingId])
}

/// A bulk conclusion that is used for handling multiple license conclusions in the same package at once.
model BulkConclusion {
  id                             Int      @id @default(autoincrement())
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  pattern                        String?
  concludedLicenseExpressionSPDX String
  detectedLicenseExpressionSPDX  String?
  comment                        String?
  local                          Boolean  @default(false)

  packageId Int
  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  licenseConclusions LicenseConclusion[]

  @@index([packageId])
  @@index([userId])
}

/// A license conclusion.
model LicenseConclusion {
  id                             Int      @id @default(autoincrement())
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  concludedLicenseExpressionSPDX String
  detectedLicenseExpressionSPDX  String?
  comment                        String?
  contextPurl                    String
  local                          Boolean  @default(false)

  fileSha256 String
  file       File   @relation(fields: [fileSha256], references: [sha256])

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  bulkConclusionId Int?
  bulkConclusion   BulkConclusion? @relation(fields: [bulkConclusionId], references: [id], onDelete: Cascade)

  @@index([fileSha256])
  @@index([userId])
  @@index([bulkConclusionId])
}

/// A copyright finding in a file.
model CopyrightFinding {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  startLine     Int
  endLine       Int
  copyright     String
  scanner       String
  scannerConfig String

  fileSha256 String
  file       File   @relation(fields: [fileSha256], references: [sha256])

  copyrightFindingCurations CopyrightFindingCuration[]

  @@index([fileSha256])
}

/// A curation of a copyright finding.
model CopyrightFindingCuration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  copyright String

  copyrightFindingId Int
  copyrightFinding   CopyrightFinding @relation(fields: [copyrightFindingId], references: [id])

  @@index([copyrightFindingId])
}

/// A scan issue for file
model ScanIssue {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  severity      String
  message       String
  scanner       String
  scannerConfig String

  fileSha256 String
  file       File   @relation(fields: [fileSha256], references: [sha256])

  @@index([fileSha256])
}

/// A path exclusion
model PathExclusion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pattern   String
  reason    String
  comment   String?

  packageId Int
  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([packageId])
  @@index([userId])
}

/// A scanner job.
model ScannerJob {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  state            String
  failureState     String?
  objectStorageKey String?
  timeout          Int?
  fileCount        Int?
  scanDuration     Float?

  packageId Int
  package   Package @relation(fields: [packageId], references: [id])

  parentId         String?
  parentScannerJob ScannerJob? @relation("RelatedScannerJobs", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  childScannerJobs ScannerJob[] @relation("RelatedScannerJobs")

  @@index([packageId])
  @@index([parentId])
}

/// A system issue that can be used to save information about errors in unexpected situations, so that the issue is easier and faster to investigate and fix.
model SystemIssue {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  severity  Severity @default(UNKNOWN)
  message   String
  details   String?
  errorCode String?
  info      Json?
  errorType String?
  resolved  Boolean  @default(false)
}

enum Severity {
  CRITICAL
  MODERATE
  LOW
  UNKNOWN
}

/// A session for authentication.
model Session {
  sid    String   @id
  expire DateTime
  sess   Json
}

/// A user model for authentication.
model User {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  username       String        @unique
  hashedPassword Bytes         @db.ByteA
  salt           Bytes         @db.ByteA
  token          String?       @unique
  role           Role          @default(USER)
  subscription   Subscription? @default(SILVER)

  licenseConclusions LicenseConclusion[]
  PathExclusions     PathExclusion[]
  BulkConclusions    BulkConclusion[]
}

enum Role {
  USER
  ADMIN
}

enum Subscription {
  FREE
  SILVER
  GOLD
}
