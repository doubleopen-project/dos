# SPDX-FileCopyrightText: 2023 HH Partners
#
# SPDX-License-Identifier: MIT

services:
    db:
        image: postgres:18.0
        volumes:
            - db-data:/var/lib/postgresql/data
        ports:
            - 5432:5432
        environment:
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_DB=postgres
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5

    redis:
        image: redis:8.2
        volumes:
            - redis-data:/data
        command: /bin/sh -c "redis-server --requirepass redis"
        ports:
            - 6379:6379
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "redis-cli ping"]
            interval: 5s
            timeout: 5s
            retries: 5

    minio:
        image: minio/minio
        ports:
            - "9000:9000"
            - "9001:9001"
        volumes:
            - minio-data:/data
        environment:
            MINIO_ROOT_USER: miniouser
            MINIO_ROOT_PASSWORD: miniopassword
        command: server --console-address ":9001" /data
        restart: always
        healthcheck:
            test: ["CMD", "mc", "ready", "local"]
            interval: 1s
            timeout: 1s
            retries: 20

    createbuckets:
        image: minio/mc
        depends_on:
            minio:
                condition: service_healthy
                required: true
        entrypoint: >
            /bin/sh -c "
            /usr/bin/mc alias set myminio http://minio:9000 miniouser miniopassword;
            /usr/bin/mc mb myminio/doubleopen;
            exit 0;
            "

    run-migrations:
        build:
            dockerfile: API.Dockerfile
        command: ["run", "db:migrate:deploy"]
        environment:
            - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
        depends_on:
            db:
                condition: service_healthy
                required: true

    auth:
        image: quay.io/keycloak/keycloak:26.3.5
        command: start-dev
        ports:
            - "8083:8080"
        environment:
            - KC_BOOTSTRAP_ADMIN_USERNAME=keycloak-admin
            - KC_BOOTSTRAP_ADMIN_PASSWORD=keycloak-admin
        healthcheck:
            test: timeout 10s bash -c ':> /dev/tcp/localhost/8080'
            interval: 10s
            timeout: 5s
            retries: 20

    terraform:
        build:
            context: ./terraform
        working_dir: /workspace
        volumes:
            - ./terraform:/workspace
        depends_on:
            auth:
                condition: service_healthy
        entrypoint: ["/bin/sh", "-c"]
        command: >
            "terraform init &&
            terraform apply -auto-approve"

    api:
        build:
            dockerfile: API.Dockerfile
        ports:
            - 3001:3001
        environment:
            - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
            - KEYCLOAK_URL=http://auth:8080
            - ALLOWED_ORIGINS=http://clearance-ui:3000
            - SPACES_ENDPOINT=http://minio:9000
            - REDIS_URL=redis://redis:6379
            - PORT=3001
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
            interval: 30s
            timeout: 10s
            retries: 5
        depends_on:
            db:
                condition: service_healthy
                required: true
            run-migrations:
                condition: service_completed_successfully
                required: true
            redis:
                condition: service_healthy
                required: true
            minio:
                condition: service_healthy
                required: true
            auth:
                condition: service_healthy
                required: true
            terraform:
                condition: service_completed_successfully
                required: true

    scanner-worker:
        build:
            dockerfile: Worker.Dockerfile
        environment:
            - REDIS_URL=redis://redis:6379
            - SPACES_ENDPOINT=http://minio:9000
            - DEBUG=true
        depends_on:
            - redis
            - minio

    clearance-ui:
        build:
            dockerfile: UI.Dockerfile
            args:
                - NEXT_PUBLIC_API_URL=http://api:3001/api/
        environment:
            - NEXTAUTH_URL=http://clearance-ui:3000
            - NEXTAUTH_SECRET=$NEXTAUTH_SECRET
            - KEYCLOAK_URL=http://auth:8080
        ports:
            - 3002:3000

    playwright-tests:
        build:
            context: .
            dockerfile: Playwright.Dockerfile
            args:
                - NEXT_PUBLIC_API_URL=http://api:3001/api/
        environment:
            - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
            - KEYCLOAK_URL=http://auth:8080
            - CI=true
        depends_on:
            api:
                condition: service_healthy
            clearance-ui:
                condition: service_started
        volumes:
            - ./playwright-artifacts/clearance_ui:/workspace/apps/clearance_ui/playwright-report

volumes:
    db-data:
        driver: local
    redis-data:
        driver: local
    minio-data:
        driver: local

networks:
    default:
        name: ort-server_default
